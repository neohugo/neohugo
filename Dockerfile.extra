# GitHub:       https://github.com/neohugo/neohugo
# Website:      https://neohugo.github.io/

FROM golang:1.15-alpine AS build

# Optionally set HUGO_BUILD_TAGS to "extended" or "nodeploy" when building like so:
#   docker build --build-arg HUGO_BUILD_TAGS=extended .
ENV HUGO_BUILD_TAGS=extended

ARG CGO=1
ENV CGO_ENABLED=${CGO}
ENV GOOS=linux
ENV GO111MODULE=on

WORKDIR /go/src/github.com/neohugo/neohugo

COPY . /go/src/github.com/neohugo/neohugo/

# gcc/g++ are required to build SASS libraries for extended version
RUN apk update && \
    apk add --no-cache gcc g++ musl-dev && \
    go get github.com/magefile/mage

RUN mage neohugo && mage install

# ---

FROM node:lts-alpine

ENV NEOHUGO_VERSION="0.4.1" \
    MOZJPEG_VERSION="4.0.0"

LABEL description="Docker container for building static sites with the neohugo static site generator with extended."
LABEL maintainer="Prachya Saechua<blackb1rd@blackb1rd.me>"

COPY --from=build /go/bin/neohugo /usr/bin/neohugo

# libc6-compat & libstdc++ are required for extended SASS libraries
# ca-certificates are required to fetch outside resources (like Twitter oEmbeds)
RUN apk update && \
    apk add --no-cache \
      bash \
      ca-certificates \
      exiftool \
      libc6-compat \
      libpng-static \
      libstdc++ \
      libwebp \
      libwebp-tools \
      openssh-client \
      pngquant \
      rsync \
      zlib-static \
    && apk add --update --no-cache --virtual .build-deps \
        autoconf \
        automake \
        binutils-gold \
        build-base \
        cmake \
        curl \
        g++ \
        gcc \
        git \
        gnupg \
        gzip \
        libgcc \
        libpng-dev \
        libstdc++ \
        libtool \
        linux-headers \
        make \
        nasm \
        pkgconf \
        python \
        tar \
        xz \
        zlib-dev \
    && deluser --remove-home node \
    && addgroup -Sg 1000 neohugo \
    && adduser -Sg neohugo -u 1000 -h /src neohugo \
    && curl -L https://github.com/mozilla/mozjpeg/archive/v${MOZJPEG_VERSION}.tar.gz | tar -xz \
    && cd mozjpeg-${MOZJPEG_VERSION} \
    && cmake -DCMAKE_BUILD_TYPE=Release . \
    && make install && cd .. \
    && rm -rf mozjpeg-${MOZJPEG_VERSION} \
    && apk del .build-deps \
    && /opt/mozjpeg/bin/cjpeg -version \
    && cwebp \
    && neohugo version

WORKDIR /src
# Expose port for live server
EXPOSE 1313
