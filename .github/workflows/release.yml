name: Release
on:
  push:
    tags:
      - v*.*.*

env:
  GOPATH: ${{ github.workspace }}
  GOBIN: ${{ github.workspace }}/bin
  GO111MODULE: "on"
  GOPROXY: "https://proxy.golang.org"
  HUGO_BUILD_TAGS: "extended"
  DART_SASS_VERSION: 1.56.2
  DART_SASS_SHA_LINUX: 9e4f455f7b8619959d7878af2862383be58392eb963a14ff87cc512c03701e2a
  DART_SASS_SHA_MACOS: 5992e979e2c30ec363f8e338822bb2b4443c74232b3340501a76180f5652cb09
  DART_SASS_SHA_WINDOWS: 8d3d9117c54840e3e6a4919e43acf75ea52f28a64fc87a8e29d80ec72ee36cfb

jobs:
  docdeploy:
    name: Deploy documentation
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
        with:
          path: neohugo
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.20"
      - name: Install Ruby
        uses: ruby/setup-ruby@ee2113536afb7f793eed4ce60e8d3b26db912da4
        with:
          ruby-version: "2.7"
          bundler-cache: true #
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
      - name: Install asciidoctor
        uses: reitzig/actions-asciidoctor@7570212ae20b63653481675fb1ff62d1073632b0
      - name: Setup Go environment
        run: |
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
          echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Go info
        run: go env
      - name: Install gofumpt and mage
        working-directory: ./neohugo
        run: |
          go install mvdan.cc/gofumpt@latest
          go install github.com/magefile/mage@latest
      - uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install Go module
        working-directory: ./neohugo
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          go mod download
          go mod verify
      - name: Install docutils
        run: |
          pip install docutils
          rst2html.py --version
      - name: Install pandoc on Linux
        run: |
          sudo apt-get update -y
          sudo apt-get install -y pandoc
      - run: pandoc -v
      - name: Install dart-sass-embedded Linux
        run: |
          echo "Install Dart Sass version ${DART_SASS_VERSION} ..."
          curl -LJO "https://github.com/sass/dart-sass-embedded/releases/download/${DART_SASS_VERSION}/sass_embedded-${DART_SASS_VERSION}-linux-x64.tar.gz";
          echo "${DART_SASS_SHA_LINUX}  sass_embedded-${DART_SASS_VERSION}-linux-x64.tar.gz" | sha256sum -c;
          tar -xvf "sass_embedded-${DART_SASS_VERSION}-linux-x64.tar.gz";
          echo "$GITHUB_WORKSPACE/sass_embedded/" >> $GITHUB_PATH
      - name: Run mage check
        working-directory: ./neohugo
        run: |
          mage -v check
      - name: Run mage neohugo
        working-directory: ./neohugo
        run: |
          mage -v neohugo
      - name: Build docs
        working-directory: ./neohugo
        env:
          HUGO_IGNOREERRORS: error-remote-getjson
          HUGO_SERVICES_INSTAGRAM_ACCESSTOKEN: dummytoken
        run: |
          ./neohugo -s docs/
      - name: Checkout docs repository
        uses: actions/checkout@v3
        with:
          repository: neohugo/neohugo.github.io
          path: docs
          token: ${{ secrets.NEOHUGO_GITHUB_TOKEN }}
      - name: Update documentation
        working-directory: ./docs
        run: |
          rsync -hrvz --delete --exclude='.git/'  ../neohugo/docs/public/ .
          git config --global user.name "blackb1rd"
          git config --global user.email "${{ secrets.NEOHUGO_EMAIL }}"
          git add -A
          git commit -m "Update $RELEASE_VERSION"
          git push
  goreleaser:
    name: Release tag
    needs: docdeploy
    runs-on: ubuntu-latest
    container:
      image: neohugo/golang-cross:v1.20.2
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.20"
      - name: Run Goreleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --rm-dist --timeout 60m
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  docker:
    name: Build Neohugo Docker
    runs-on: ubuntu-latest
    steps:
      - name: Prepare
        id: prep
        run: |
          echo ::set-output name=tags::neohugo/neohugo:latest,neohugo/neohugo:${GITHUB_REF/refs\/tags\//},ghcr.io/${{ github.repository_owner }}/neohugo:latest,ghcr.io/${{ github.repository_owner }}/neohugo:${GITHUB_REF/refs\/tags\//}
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
      - name: Build and Push to Docker Hub
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.prep.outputs.tags }}
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
      - name: Prepare-Extra
        id: prep-extra
        run: |
          echo ::set-output name=tags::neohugo/neohugo:latest-extra,neohugo/neohugo:${GITHUB_REF/refs\/tags\//}-extra,ghcr.io/${{ github.repository_owner }}/neohugo:latest-extra,ghcr.io/${{ github.repository_owner }}/neohugo:${GITHUB_REF/refs\/tags\//}-extra
      - name: Build Extra and push
        id: docker_build_extra
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.extra
          push: true
          tags: ${{ steps.prep-extra.outputs.tags }}
      - name: Image Extra digest
        run: echo ${{ steps.docker_build_extra.outputs.digest }}
