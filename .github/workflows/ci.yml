name: CI
on:
  push:
    branches:
      - main
  pull_request:

env:
  GO111MODULE: "on"
  GOPROXY: "https://proxy.golang.org"
  HUGO_BUILD_TAGS: "extended"
  DART_SASS_VERSION: 1.56.2
  DART_SASS_SHA_LINUX: 9e4f455f7b8619959d7878af2862383be58392eb963a14ff87cc512c03701e2a
  DART_SASS_SHA_MACOS: 5992e979e2c30ec363f8e338822bb2b4443c74232b3340501a76180f5652cb09
  DART_SASS_SHA_WINDOWS: 8d3d9117c54840e3e6a4919e43acf75ea52f28a64fc87a8e29d80ec72ee36cfb

jobs:
  build:
    name: Build (${{ matrix.os }}, Go ${{ matrix.go }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go: [ '1.20' ]
    steps:
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
      - name: Setup Ruby
        uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.7'
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install asciidoctor
        uses: reitzig/actions-asciidoctor@v2.0.0
      - name: Git checkout
        uses: actions/checkout@v3
      - name: Setup Go environment
        shell: bash
        run: |
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
      - name: Go info
        run: go env
      - name: Install gofumpt and mage
        run: |
          go install mvdan.cc/gofumpt@latest
          go install github.com/magefile/mage@latest
      - uses: actions/cache@v3
        id: cache
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install Go module
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          go mod download
          go mod verify
      - name: Install docutils
        run: |
          pip install docutils
          rst2html.py --version
      - if: matrix.os == 'ubuntu-latest'
        name: Install pandoc on Linux
        run: |
            sudo apt-get update -y
            sudo apt-get install -y pandoc
      - if: matrix.os == 'macos-latest'
        run: |
          brew install pandoc
      - if: matrix.os == 'windows-latest'
        run: |
          choco install pandoc
      - run: pandoc -v
      - if: matrix.os == 'ubuntu-latest'
        name: Install dart-sass-embedded Linux
        run: |
          echo "Install Dart Sass version ${DART_SASS_VERSION} ..."
          curl -LJO "https://github.com/sass/dart-sass-embedded/releases/download/${DART_SASS_VERSION}/sass_embedded-${DART_SASS_VERSION}-linux-x64.tar.gz";
          echo "${DART_SASS_SHA_LINUX}  sass_embedded-${DART_SASS_VERSION}-linux-x64.tar.gz" | sha256sum -c;
          tar -xvf "sass_embedded-${DART_SASS_VERSION}-linux-x64.tar.gz";
          echo "$GITHUB_WORKSPACE/sass_embedded/" >> $GITHUB_PATH
      - if: matrix.os == 'macos-latest'
        name: Install dart-sass-embedded MacOS
        run: |
          echo "Install Dart Sass version ${DART_SASS_VERSION} ..."
          curl -LJO "https://github.com/sass/dart-sass-embedded/releases/download/${DART_SASS_VERSION}/sass_embedded-${DART_SASS_VERSION}-macos-x64.tar.gz";
          echo "${DART_SASS_SHA_MACOS}  sass_embedded-${DART_SASS_VERSION}-macos-x64.tar.gz" | shasum -a 256 -c;
          tar -xvf "sass_embedded-${DART_SASS_VERSION}-macos-x64.tar.gz";
          echo "$GITHUB_WORKSPACE/sass_embedded/" >> $GITHUB_PATH
      - if: matrix.os == 'windows-latest'
        name: Install dart-sass-embedded Windows
        run: |
          echo "Install Dart Sass version ${env:DART_SASS_VERSION} ..."
          curl -LJO "https://github.com/sass/dart-sass-embedded/releases/download/${env:DART_SASS_VERSION}/sass_embedded-${env:DART_SASS_VERSION}-windows-x64.zip";
          Expand-Archive -Path "sass_embedded-${env:DART_SASS_VERSION}-windows-x64.zip" -DestinationPath .;
          echo  "$env:GITHUB_WORKSPACE/sass_embedded/" | Out-File -FilePath $Env:GITHUB_PATH -Encoding utf-8 -Append
      - name: Run mage tests
        run: |
          mage -v test
      - name: Run mage check
        run: |
          mage -v check
      - name: Run mage neohugo
        run: |
          mage -v neohugo
  gotip:
    name: Build ubuntu-latest, GoTip
    runs-on: ubuntu-latest
    steps:
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.20
      - name: Setup gotip
        run: |
          go install golang.org/dl/gotip@latest
          gotip download
      - name: Setup Ruby
        uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.7'
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install asciidoctor
        uses: reitzig/actions-asciidoctor@v2.0.0
      - name: Git checkout
        uses: actions/checkout@v3
      - name: Setup Go environment
        shell: bash
        run: |
          echo "GOPATH=$(gotip env GOPATH)" >> $GITHUB_ENV
          echo "$(gotip env GOPATH)/bin" >> $GITHUB_PATH
      - name: Go info
        run: gotip env
      - name: Install gofumpt and mage
        continue-on-error: true
        run: |
          go install mvdan.cc/gofumpt@latest
          go install github.com/magefile/mage@latest
      - uses: actions/cache@v3
        id: cache
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install Go module
        if: steps.cache.outputs.cache-hit != 'true'
        continue-on-error: true
        run: |
          gotip mod download
          gotip mod verify
      - name: Install docutils
        run: |
          pip install docutils
          rst2html.py --version
      - name: Install pandoc on Linux
        run: |
            sudo apt-get update -y
            sudo apt-get install -y pandoc
      - run: pandoc -v
      - name: Install dart-sass-embedded Linux
        run: |
          curl -LJO  https://github.com/sass/dart-sass-embedded/releases/download/1.49.7/sass_embedded-1.49.7-linux-x64.tar.gz;
          echo "0bdfa8066f335f4fb1ad239101ae1dcaab51b2c0c4b8c60699f476f6b59586a7  sass_embedded-1.49.7-linux-x64.tar.gz" | sha256sum -c;
          tar -xvf sass_embedded-1.49.7-linux-x64.tar.gz;
          echo "$GITHUB_WORKSPACE/sass_embedded/" >> $GITHUB_PATH
      - name: Run mage tests
        continue-on-error: true
        run: |
          GOEXE=gotip mage -v test
      - name: Run mage check
        continue-on-error: true
        run: |
          GOEXE=gotip mage -v check
      - name: Run mage neohugo
        continue-on-error: true
        run: |
          GOEXE=gotip mage -v neohugo
  docker:
    name: Build Neohugo Docker Latest
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to GitHub Container Registry
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            neohugo/neohugo:latest
            ghcr.io/${{ github.repository_owner }}/neohugo:latest
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
      - name: Build Extra and push
        id: docker_build_extra
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.extra
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            neohugo/neohugo:latest-extra
            ghcr.io/${{ github.repository_owner }}/neohugo:latest-extra
      - name: Image Extra digest
        run: echo ${{ steps.docker_build_extra.outputs.digest }}
