name: CI
on:
  push:
    branches:
      - main
  pull_request:

env:
  GO111MODULE: "on"
  GOPROXY: "https://proxy.golang.org"
  HUGO_BUILD_TAGS: "extended"

jobs:
  build:
    name: Build (${{ matrix.os }}, Go ${{ matrix.go }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-latest, windows-latest]
        go: [ '1.16' ]
    steps:
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}
      - name: Setup Ruby
        uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.7'
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install asciidoctor
        uses: reitzig/actions-asciidoctor@v2.0.0
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Setup Go environment
        shell: bash
        run: |
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
      - name: Go info
        run: go env
      - name: Install gofumpt and mage
        run: |
          go get mvdan.cc/gofumpt
          go get github.com/magefile/mage
      - uses: actions/cache@v2
        id: cache
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install Go module
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          go mod download
          go mod verify
      - name: Install docutils
        run: |
          pip install docutils
          rst2html.py --version
      - if: matrix.os == 'ubuntu-20.04'
        name: Install pandoc on Linux
        run: |
            sudo apt-get update -y
            sudo apt-get install -y pandoc
      - if: matrix.os == 'macos-latest'
        run: |
          brew install pandoc
      - if: matrix.os == 'windows-latest'
        run: |
          choco install pandoc
      - run: pandoc -v
      - if: matrix.os == 'ubuntu-20.04'
        name: Install dart-sass-embedded Linux
        run: |
          curl -LJO https://github.com/sass/dart-sass-embedded/releases/download/1.0.0-beta.6/sass_embedded-1.0.0-beta.6-linux-x64.tar.gz;
          echo "04fc1e5e28d29a4585a701941b6dace56771d94bfbe7f9e4db28d24417ceeec3  sass_embedded-1.0.0-beta.6-linux-x64.tar.gz" | sha256sum -c;
          tar -xvf sass_embedded-1.0.0-beta.6-linux-x64.tar.gz;
          echo "$GITHUB_WORKSPACE/sass_embedded/" >> $GITHUB_PATH
      - if: matrix.os == 'macos-latest'
        name: Install dart-sass-embedded MacOS
        run: |
          curl -LJO https://github.com/sass/dart-sass-embedded/releases/download/1.0.0-beta.6/sass_embedded-1.0.0-beta.6-macos-x64.tar.gz;
          echo "b3b984675a9b04aa22f6f2302dda4191b507ac2ca124467db2dfe7e58e72fbad  sass_embedded-1.0.0-beta.6-macos-x64.tar.gz" | shasum -a 256 -c;
          tar -xvf sass_embedded-1.0.0-beta.6-macos-x64.tar.gz;
          echo "$GITHUB_WORKSPACE/sass_embedded/" >> $GITHUB_PATH
      - if: matrix.os == 'windows-latest'
        name: Install dart-sass-embedded Windows
        run: |
          curl -LJO https://github.com/sass/dart-sass-embedded/releases/download/1.0.0-beta.6/sass_embedded-1.0.0-beta.6-windows-x64.zip;
          echo "6ae442129dbb3334bc21ef851261da6c0c1b560da790ca2e1350871d00ab816d  sass_embedded-1.0.0-beta.6-windows-x64.zip" | sha256sum -c;
          unzip sass_embedded-1.0.0-beta.6-windows-x64.zip;
          echo  "$env:GITHUB_WORKSPACE/sass_embedded/" | Out-File -FilePath $Env:GITHUB_PATH -Encoding utf-8 -Append
      - name: Run mage tests
        run: |
          mage -v test
      - name: Run mage check
        run: |
          mage -v check
      - name: Run mage neohugo
        run: |
          mage -v neohugo
  gotip:
    name: Build ubuntu-20.04, GoTip
    runs-on: ubuntu-20.04
    steps:
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16
      - name: Setup gotip
        run: |
          go get golang.org/dl/gotip
          gotip download
      - name: Setup Ruby
        uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.7'
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install asciidoctor
        uses: reitzig/actions-asciidoctor@v2.0.0
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Setup Go environment
        shell: bash
        run: |
          echo "GOPATH=$(gotip env GOPATH)" >> $GITHUB_ENV
          echo "$(gotip env GOPATH)/bin" >> $GITHUB_PATH
      - name: Go info
        run: gotip env
      - name: Install gofumpt and mage
        continue-on-error: true
        run: |
          gotip get mvdan.cc/gofumpt
          gotip get github.com/magefile/mage
      - uses: actions/cache@v2
        id: cache
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install Go module
        if: steps.cache.outputs.cache-hit != 'true'
        continue-on-error: true
        run: |
          gotip mod download
          gotip mod verify
      - name: Install docutils
        run: |
          pip install docutils
          rst2html.py --version
      - name: Install pandoc on Linux
        run: |
            sudo apt-get update -y
            sudo apt-get install -y pandoc
      - run: pandoc -v
      - name: Install dart-sass-embedded Linux
        run: |
          curl -LJO https://github.com/sass/dart-sass-embedded/releases/download/1.0.0-beta.6/sass_embedded-1.0.0-beta.6-linux-x64.tar.gz;
          echo "04fc1e5e28d29a4585a701941b6dace56771d94bfbe7f9e4db28d24417ceeec3  sass_embedded-1.0.0-beta.6-linux-x64.tar.gz" | sha256sum -c;
          tar -xvf sass_embedded-1.0.0-beta.6-linux-x64.tar.gz;
          echo "$GITHUB_WORKSPACE/sass_embedded/" >> $GITHUB_PATH
      - name: Run mage tests
        continue-on-error: true
        run: |
          GOEXE=gotip mage -v test
      - name: Run mage check
        continue-on-error: true
        run: |
          GOEXE=gotip mage -v check
      - name: Run mage neohugo
        continue-on-error: true
        run: |
          GOEXE=gotip mage -v neohugo
  docker:
    name: Build Neohugo Docker Latest
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to GitHub Container Registry
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            neohugo/neohugo:latest
            ghcr.io/${{ github.repository_owner }}/neohugo:latest
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
      - name: Build Extra and push
        id: docker_build_extra
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.extra
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            neohugo/neohugo:latest-extra
            ghcr.io/${{ github.repository_owner }}/neohugo:latest-extra
      - name: Image Extra digest
        run: echo ${{ steps.docker_build_extra.outputs.digest }}
